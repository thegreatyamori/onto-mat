{"version":3,"sources":["Components/Read/CodeInput.jsx","Components/Read/Querys.jsx","Components/Read/QueryResult.jsx","Components/Read/index.jsx","Components/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Codeinput","query","onSubmit","initial_value","useState","value","setValue","useEffect","className","options","theme","lineNumbers","onChange","editor","data","onClick","headers","Headers","append","urlencoded","URLSearchParams","fetch","method","mode","body","then","response","text","result","JSON","parse","catch","error","console","log","Querys","Table","vars","head","bindings","results","map","item","key","index","name","td","QueryResult","table","role","aria-labelledby","_table","setTable","el","obj","toString","call","match","toLowerCase","Object","getOwnPropertyNames","length","isEmpty","Read","setQuery","setData","d","q","Main","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c92db6f5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\n\r\nimport \"codemirror/mode/htmlmixed/htmlmixed\";\r\nimport \"codemirror/mode/css/css\";\r\nimport \"codemirror/mode/sparql/sparql\";\r\n\r\nexport default function Codeinput({ query, onSubmit }) {\r\n  const initial_value =\r\n    \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n\" +\r\n    \"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n\" +\r\n    \"PREFIX owl: <http://www.w3.org/2002/07/owl#>\\n\" +\r\n    \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\\n\";\r\n  const [value, setValue] = useState(initial_value);\r\n\r\n  const handleSubmit = () => {\r\n    let headers = new Headers();\r\n    headers.append(\r\n      \"Content-Type\",\r\n      \"application/x-www-form-urlencoded;charset=UTF-8\"\r\n    );\r\n    headers.append(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    headers.append(\"Accept\", \"application/sparql-results+json\");\r\n\r\n    let urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"query\", value);\r\n\r\n    let options = {\r\n      headers,\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: urlencoded,\r\n    };\r\n\r\n    fetch(\"http://localhost:8080/fuseki/matriculacion/sparql\", options)\r\n      .then((response) => response.text())\r\n      .then((result) => onSubmit(JSON.parse(result)))\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (query !== \"\") {\r\n      setValue(initial_value + query);\r\n    }\r\n  }, [query, initial_value]);\r\n\r\n  return (\r\n    <div className=\"Section-code-item\">\r\n      <h3 className=\"Section-title\">SPARQL query</h3>\r\n      <CodeMirror\r\n        value={value}\r\n        options={{\r\n          // mode: \"xml\",\r\n          theme: \"material\",\r\n          lineNumbers: true,\r\n        }}\r\n        onChange={(editor, data, value) => {}}\r\n      />\r\n      <button className=\"List-item-button m-0\" onClick={handleSubmit}>\r\n        Consultar\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Querys({ onChange }) {\r\n  const query_1 = () => {\r\n    onChange(\r\n      \"PREFIX mat: <http://www.semanticweb.org/thegr/ontologies/2020/7/matriculacion#>\\n\\n\" +\r\n        \"SELECT ?nombre ?carrera\\n\" +\r\n        \"WHERE {\\n\" +\r\n        \"  ?dc mat:aCargoDe ?c.\\n\" +\r\n        \"  ?dc mat:nombre ?nombre.\\n\" +\r\n        \"  ?c mat:nombre ?carrera.\\n\" +\r\n        \"}\"\r\n    );\r\n  };\r\n  const query_2 = () => {\r\n    onChange(\r\n      \"PREFIX mat: <http://www.semanticweb.org/thegr/ontologies/2020/7/matriculacion#>\\n\\n\" +\r\n        \"SELECT ?nrc ?materia\\n\" +\r\n        \"WHERE {\\n\" +\r\n        \"  ?m mat:perteneceAUna ?c.\\n\" +\r\n        \"  ?m mat:nrc ?nrc.\\n\" +\r\n        \"  ?m mat:nombre ?materia.\\n\" +\r\n        '  ?c mat:nombre \"Ingenieria de Software\"^^xsd:string.\\n' +\r\n        \"}\"\r\n    );\r\n  };\r\n  const query_3 = () => {\r\n    onChange(\r\n      \"PREFIX mat: <http://www.semanticweb.org/thegr/ontologies/2020/7/matriculacion#>\\n\\n\" +\r\n        \"SELECT ?docente\\n\" +\r\n        \"WHERE {\\n\" +\r\n        \"  ?d mat:imparteMuchas ?m.\\n\" +\r\n        \"  ?d mat:nombre ?docente.\\n\" +\r\n        '  ?m mat:nombre \"Inteligencia artificial 1\"^^xsd:string.\\n' +\r\n        \"}\"\r\n    );\r\n  };\r\n  const query_4 = () => {\r\n    onChange(\r\n      \"PREFIX mat: <http://www.semanticweb.org/thegr/ontologies/2020/7/matriculacion#>\\n\\n\" +\r\n        \"SELECT ?materia\\n\" +\r\n        \"WHERE {\\n\" +\r\n        \"  ?m mat:perteneceAUna ?c.\\n\" +\r\n        \"  ?m mat:nombre ?materia.\\n\" +\r\n        '  ?c mat:nombre \"Ingenieria de Software\"^^xsd:string.\\n' +\r\n        \"}\"\r\n    );\r\n  };\r\n  const query_5 = () => {\r\n    onChange(\r\n      \"PREFIX mat: <http://www.semanticweb.org/thegr/ontologies/2020/7/matriculacion#>\\n\\n\" +\r\n        \"SELECT ?estudiante\\n\" +\r\n        \"WHERE {\\n\" +\r\n        \"  ?es mat:realizaLa ?m.\\n\" +\r\n        \"  ?m mat:seRealizaEnUn ?p.\\n\" +\r\n        \"  ?es mat:nombre ?estudiante.\\n\" +\r\n        '  ?p mat:nombre \"PREGRADO S-I MAY20 - SEP20\"^^xsd:string.\\n' +\r\n        \"}\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Section-list-item\">\r\n      <h3 className=\"Section-title\">Querys</h3>\r\n      <ul className=\"List-items\">\r\n        <li>\r\n          <button className=\"List-item-button\" onClick={() => query_1()}>\r\n            ¿Cómo se llama el director de cada carrera?\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className=\"List-item-button\" onClick={() => query_2()}>\r\n            Listar los NRC de una carrera en específico\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className=\"List-item-button\" onClick={() => query_3()}>\r\n            El nombre del docente de una materia\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className=\"List-item-button\" onClick={() => query_4()}>\r\n            Materias por carrera\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className=\"List-item-button\" onClick={() => query_5()}>\r\n            En qué periodo está matriculado un estudiante\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../Styles.css\";\r\n\r\nconst toType = (obj) => {\r\n  return {}.toString\r\n    .call(obj)\r\n    .match(/\\s([a-z|A-Z]+)/)[1]\r\n    .toLowerCase();\r\n};\r\n\r\nconst isEmpty = (el) => {\r\n  switch (toType(el)) {\r\n    case \"object\":\r\n      return Object.getOwnPropertyNames(el).length === 0;\r\n    case \"array\":\r\n    case \"string\":\r\n      return el.length === 0;\r\n    default:\r\n      // aún no funciona para más tipos\r\n      break;\r\n  }\r\n};\r\n\r\nfunction Table({ data }) {\r\n  const {\r\n    head: { vars },\r\n    results: { bindings },\r\n  } = data;\r\n  const head = vars.map((item) => <th key={item}>{item}</th>);\r\n  const td = (item) => {\r\n    return vars.map((name, index) => {\r\n      return <td key={`${item[name].value}_${index}`}>{item[name].value}</td>;\r\n    });\r\n  };\r\n  const body = bindings.map((item, index) => (\r\n    <tr key={`${item}_${index}`}>{td(item)}</tr>\r\n  ));\r\n\r\n  return (\r\n    <table className=\"Table\">\r\n      <thead>\r\n        <tr>{head}</tr>\r\n      </thead>\r\n      <tbody>{body}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default function QueryResult({ table }) {\r\n  const [_table, setTable] = useState(\r\n    <>\r\n      <span className=\"Section-title\">\r\n        <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">\r\n          📄\r\n        </span>\r\n        No hay resultados\r\n      </span>\r\n    </>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(table)) {\r\n      setTable(<Table data={table} />);\r\n    }\r\n  }, [table]);\r\n\r\n  return (\r\n    <div className=\"Section-table\">\r\n      <h3 className=\"Section-title\">Query Result</h3>\r\n      {_table}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Codeinput from \"./CodeInput\";\r\nimport Querys from \"./Querys\";\r\nimport QueryResult from \"./QueryResult\";\r\nimport \"../Styles.css\";\r\n\r\nexport default function Read() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [data, setData] = useState({});\r\n  const newQuery = (q) => setQuery(q);\r\n  const handleSubmit = (d) => setData(d);\r\n\r\n  return (\r\n    <div className=\"Section-center\">\r\n      <div className=\"Section-grid\">\r\n        <Codeinput query={query} onSubmit={handleSubmit} />\r\n        <Querys onChange={newQuery} />\r\n      </div>\r\n      <QueryResult table={data} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Read from \"./Read\";\r\nimport \"./Styles.css\";\r\n\r\nexport default function Main() {\r\n  return (\r\n      <Read />\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Main from './Components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2 className=\"App-title\">Matriculación Query UI</h2>\n        <hr/>\n      </header>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}